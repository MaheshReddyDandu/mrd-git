"""add_enhanced_attendance_and_policy_models

Revision ID: adc99ebb3c19
Revises: c49a4e208180
Create Date: 2025-06-21 20:08:18.647368

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'adc99ebb3c19'
down_revision: Union[str, None] = 'c49a4e208180'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('week_offs')
    op.drop_table('policy_assignments')
    op.drop_index('ix_notifications_tenant_id', table_name='notifications')
    op.drop_index('ix_notifications_user_id', table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('holidays')
    op.drop_table('attendance')
    op.drop_table('attendance_logs')
    op.drop_table('projects')
    op.drop_index('idx_session_token_expires', table_name='user_sessions')
    op.drop_index('idx_session_user_active', table_name='user_sessions')
    op.drop_index('ix_user_sessions_id', table_name='user_sessions')
    op.drop_index('ix_user_sessions_token_hash', table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_table('departments')
    op.drop_table('branches')
    op.drop_table('clients')
    op.drop_index('ix_audit_logs_action', table_name='audit_logs')
    op.drop_index('ix_audit_logs_tenant_id', table_name='audit_logs')
    op.drop_index('ix_audit_logs_user_id', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_table('leave_types')
    op.drop_index('ix_permissions_action', table_name='permissions')
    op.drop_index('ix_permissions_id', table_name='permissions')
    op.drop_index('ix_permissions_name', table_name='permissions')
    op.drop_index('ix_permissions_resource', table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('ix_roles_id', table_name='roles')
    op.drop_index('ix_roles_name_tenant', table_name='roles')
    op.drop_table('roles')
    op.drop_index('idx_role_permission_unique', table_name='role_permissions')
    op.drop_index('ix_role_permissions_id', table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_index('idx_user_role_unique', table_name='user_roles')
    op.drop_index('ix_user_roles_id', table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_table('policies')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_table('tenants')
    op.drop_table('leave_requests')
    op.drop_table('regularization_requests')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('regularization_requests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('requested_in', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('requested_out', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('approver_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approver_id'], ['users.id'], name='regularization_requests_approver_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='regularization_requests_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='regularization_requests_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='regularization_requests_pkey')
    )
    op.create_table('leave_requests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('leave_type_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('days_requested', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('approver_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approver_id'], ['users.id'], name='leave_requests_approver_id_fkey'),
    sa.ForeignKeyConstraint(['leave_type_id'], ['leave_types.id'], name='leave_requests_leave_type_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='leave_requests_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='leave_requests_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='leave_requests_pkey')
    )
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('name', name='tenants_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('needs_password', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='users_client_id_fkey'),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='users_department_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='users_project_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='users_role_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='users_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_table('policies',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('rules', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='policies_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='policies_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_roles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey')
    )
    op.create_index('ix_user_roles_id', 'user_roles', ['id'], unique=False)
    op.create_index('idx_user_role_unique', 'user_roles', ['user_id', 'role_id'], unique=False)
    op.create_table('role_permissions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='role_permissions_pkey')
    )
    op.create_index('ix_role_permissions_id', 'role_permissions', ['id'], unique=False)
    op.create_index('idx_role_permission_unique', 'role_permissions', ['role_id', 'permission_id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='roles_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_roles_name_tenant', 'roles', ['name', 'tenant_id'], unique=False)
    op.create_index('ix_roles_id', 'roles', ['id'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey')
    )
    op.create_index('ix_permissions_resource', 'permissions', ['resource'], unique=False)
    op.create_index('ix_permissions_name', 'permissions', ['name'], unique=False)
    op.create_index('ix_permissions_id', 'permissions', ['id'], unique=False)
    op.create_index('ix_permissions_action', 'permissions', ['action'], unique=False)
    op.create_table('leave_types',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_paid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='leave_types_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='leave_types_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_resource', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('target_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='audit_logs_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('ix_audit_logs_user_id', 'audit_logs', ['user_id'], unique=False)
    op.create_index('ix_audit_logs_tenant_id', 'audit_logs', ['tenant_id'], unique=False)
    op.create_index('ix_audit_logs_action', 'audit_logs', ['action'], unique=False)
    op.create_table('clients',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contact_phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='clients_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clients_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('branches',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('geo_fence', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='branches_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='branches_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('departments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('branch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], name='departments_branch_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='departments_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='departments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_sessions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_sessions_pkey')
    )
    op.create_index('ix_user_sessions_token_hash', 'user_sessions', ['token_hash'], unique=False)
    op.create_index('ix_user_sessions_id', 'user_sessions', ['id'], unique=False)
    op.create_index('idx_session_user_active', 'user_sessions', ['user_id', 'is_active'], unique=False)
    op.create_index('idx_session_token_expires', 'user_sessions', ['token_hash', 'expires_at'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('budget', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='projects_client_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='projects_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('attendance_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('attendance_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('location_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('device_info', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['attendance_id'], ['attendance.id'], name='attendance_logs_attendance_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='attendance_logs_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='attendance_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='attendance_logs_pkey')
    )
    op.create_table('attendance',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('clock_in', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('clock_out', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='attendance_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='attendance_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='attendance_pkey')
    )
    op.create_table('holidays',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='holidays_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='holidays_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='notifications_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notifications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_index('ix_notifications_user_id', 'notifications', ['user_id'], unique=False)
    op.create_index('ix_notifications_tenant_id', 'notifications', ['tenant_id'], unique=False)
    op.create_table('policy_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('branch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], name='policy_assignments_branch_id_fkey'),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='policy_assignments_department_id_fkey'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='policy_assignments_policy_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='policy_assignments_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='policy_assignments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='policy_assignments_pkey')
    )
    op.create_table('week_offs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='week_offs_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='week_offs_pkey')
    )
    # ### end Alembic commands ###
